import datetime
import secrets
import os
from flask import Flask, request, render_template
import traceback
import pandas as pd
import time
from hwetests import asta, umat, umat_with_uncertainty


# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()


@app.route('/impute-form', methods=['POST'])
def impute_form():
    try:
        current_time = time.time()
        temp_save_path = f"static/{current_time}.csv"
        matrix = request.files['matrix-file']
        matrix.save(temp_save_path)
        df = pd.read_csv(temp_save_path)
        os.remove(temp_save_path)

        if df.shape[0] != df.shape[1]:
            return render_template("error.html", active="", error="The matrix dimensions are not matching.")

        for column in df.columns:
            if df[column].dtype not in [float, int]:
                return render_template("error.html", active="",
                                       error=f"Matrix datatype should be float or int.\nYou have "
                                             f"{df[column].dtype} datatype in column {column}.")

        matrix = df.to_numpy()

        pval = umat.full_algorithm(matrix)
        plot_path = "umat_plot.png"

        return render_template("results_second_edition.html", active="results",
                               pic_path=plot_path, pval=pval, dof=False, statistic=False, csv_path=False)


    #render an error template if an exception occurs
    except Exception as e:
        traceback.print_exc()
        return render_template("error.html", active="", error=str(e))


@app.route('/impute-form-2', methods=['POST'])
def impute_form_2():
    '''asta implementation'''
    try:
        current_time = time.time()
        temp_save_path = f"static/{current_time}"
        matrix = request.files['csv-file']
        matrix.save(temp_save_path+".csv")

        ## Apply Or's function
        plot_path = temp_save_path + "plot"
        csv_path = temp_save_path + "output_file"
        pval, statistic, dof = asta.full_algorithm(temp_save_path+".csv", should_save_plot=plot_path,
                                                   should_save_csv=csv_path, cutoff_value=2.0)
        os.remove(temp_save_path+".csv")
        plot_path += ".png"
        csv_path += ".csv"

        return render_template("results_second_edition.html", active="results", plot_path=plot_path,
                               pval=pval, dof=dof, statistic=statistic, csv_path=csv_path)

    #render an error template if an exception occurs
    except Exception as e:
        traceback.print_exc()
        return render_template("error.html", active="", error=str(e))


@app.route('/impute-form-3', methods=['POST'])
def impute_form_3():
    try:
        current_time = time.time()
        temp_save_path = f"static/{current_time}.csv"
        matrix = request.files['csv-file']
        matrix.save(temp_save_path)
        df = pd.read_csv(temp_save_path)

        for column in df.columns:
            if df[column].dtype not in [float, int]:
                return render_template("error.html", active="",
                                       error=f"Matrix datatype should be float or int.\nYou have "
                                             f"{df[column].dtype} datatype in column {column}.")

        pval = umat_with_uncertainty.full_algorithm(temp_save_path)
        os.remove(temp_save_path)

        return render_template("results_second_edition.html", active="results",
                               pic_path=False, pval=pval, dof=False, statistic=False, csv_path=False)

    except Exception as e:
        traceback.print_exc()
        return render_template("error.html", active="", error=str(e))


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    return render_template("index.html", active="Home")


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html", active="Example")


@app.route('/Help', methods=['GET'])
def help():
    return render_template("help.html", active="Help")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html", active="About")


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
